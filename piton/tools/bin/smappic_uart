#!/usr/bin/python3
# Copyright (c) 2019 Princeton University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Princeton University nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import subprocess
from optparse import OptionParser
import os
script_folder = os.path.join(os.environ["DV_ROOT"], "tools/src/smappic")

def main():
    parser = OptionParser(add_help_option=True)
    parser.add_option("-f", "--fpgaid", dest="fpgaid", default="0", help="FPGA id")
    parser.add_option("-c", "--chipid", dest="chipid", default="0", help="Local chip id")
    parser.add_option("-s", "--secondary", dest="secondary", default=False, action="store_true", help="use secondary uart?")
    (options, args) = parser.parse_args()
    if int(options.fpgaid) < 0 or int(options.fpgaid) > 3:
        parser.error("fpgaid must be between 0 and 3")
    if int(options.chipid) < 0 or int(options.chipid) > 3:
        parser.error("chipid must be between 0 and 3")

    secondary = "1" if options.secondary else "0"
    subprocess.call(["sudo", os.path.join(script_folder, "./smappic_uart"), options.fpgaid, options.chipid, secondary])


if __name__ == '__main__':
    main()
